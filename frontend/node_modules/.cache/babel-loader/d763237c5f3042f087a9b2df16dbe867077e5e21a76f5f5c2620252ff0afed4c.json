{"ast":null,"code":"var _jsxFileName = \"/home/achraf/learning/QuickChess/frontend/src/components/chessboard/Chessboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Chess } from 'chess.js';\nimport './Chessboard.css';\nimport MoveDisplay from './MoveDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['br', 'bn', 'bb', 'bq', 'bk', 'bb', 'bn', 'br'], ['bp', 'bp', 'bp', 'bp', 'bp', 'bp', 'bp', 'bp'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['wp', 'wp', 'wp', 'wp', 'wp', 'wp', 'wp', 'wp'], ['wr', 'wn', 'wb', 'wq', 'wk', 'wb', 'wn', 'wr']];\nconst Chessboard = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    game: new Chess(),\n    board: initialBoard,\n    selectedPiece: null,\n    moveHistory: [],\n    currentMoveIndex: -1,\n    error: '',\n    draggedPiece: null,\n    isGameOver: false,\n    stockfishLevel: 1,\n    isPlayerTurn: true,\n    playerColor: Math.random() < 0.5 ? 'w' : 'b',\n    isBoardFlipped: false,\n    isGameStarted: false,\n    isThreeFoldRepetition: false,\n    validMoves: [],\n    positionHistory: [],\n    lastMove: null\n  });\n  const stockfishWorker = useRef(null);\n  const updateGameState = useCallback(updates => {\n    setGameState(prev => ({\n      ...prev,\n      ...updates,\n      board: updates.game ? updates.game.board().map(row => row.map(square => square ? `${square.color}${square.type}` : '')) : prev.board,\n      isGameOver: updates.game ? updates.game.isGameOver() : prev.isGameOver\n    }));\n  }, []);\n  const handleStockfishMessage = useCallback(event => {\n    const message = event.data;\n    if (typeof message === 'string' && message.startsWith('bestmove')) {\n      const [from, to] = message.split(' ')[1].match(/.{1,2}/g);\n      const newGame = new Chess(gameState.game.fen());\n      try {\n        const move = newGame.move({\n          from,\n          to,\n          promotion: 'q'\n        });\n        const newPosition = newGame.fen().split(' ').slice(0, 4).join(' ');\n        const newPositionHistory = [...gameState.positionHistory, newPosition];\n        if (move) {\n          updateGameState({\n            game: newGame,\n            moveHistory: [...gameState.moveHistory, move],\n            currentMoveIndex: gameState.currentMoveIndex + 1,\n            positionHistory: newPositionHistory,\n            isPlayerTurn: true,\n            lastMove: {\n              from,\n              to\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error applying Stockfish move:', error.message);\n      }\n    }\n  }, [gameState, updateGameState]);\n  useEffect(() => {\n    try {\n      stockfishWorker.current = new Worker('stockfishWorker.js');\n      stockfishWorker.current.postMessage('uci');\n      stockfishWorker.current.postMessage('ucinewgame');\n      stockfishWorker.current.postMessage(`setoption name Skill Level value ${gameState.stockfishLevel}`);\n      stockfishWorker.current.onmessage = handleStockfishMessage;\n    } catch (error) {\n      console.error('Error initializing Stockfish worker:', error);\n    }\n    return () => {\n      var _stockfishWorker$curr;\n      return (_stockfishWorker$curr = stockfishWorker.current) === null || _stockfishWorker$curr === void 0 ? void 0 : _stockfishWorker$curr.terminate();\n    };\n  }, [gameState.stockfishLevel, handleStockfishMessage]);\n  useEffect(() => {\n    setGameState(prev => ({\n      ...prev,\n      isBoardFlipped: prev.playerColor === 'b'\n    }));\n  }, []);\n  const makeStockfishMove = useCallback(() => {\n    var _stockfishWorker$curr2, _stockfishWorker$curr3;\n    const fen = gameState.game.fen();\n    const depth = gameState.stockfishLevel;\n    (_stockfishWorker$curr2 = stockfishWorker.current) === null || _stockfishWorker$curr2 === void 0 ? void 0 : _stockfishWorker$curr2.postMessage(`position fen ${fen}`);\n    (_stockfishWorker$curr3 = stockfishWorker.current) === null || _stockfishWorker$curr3 === void 0 ? void 0 : _stockfishWorker$curr3.postMessage(`go depth ${depth}`);\n  }, [gameState.game, gameState.stockfishLevel]);\n  useEffect(() => {\n    if (!gameState.isPlayerTurn && !gameState.isGameOver) {\n      setTimeout(makeStockfishMove, 1500);\n    }\n  }, [gameState.isPlayerTurn, gameState.isGameOver, makeStockfishMove]);\n  const handleNewGame = () => {\n    const newPlayerColor = Math.random() < 0.5 ? 'w' : 'b';\n    updateGameState({\n      game: new Chess(),\n      board: initialBoard,\n      moveHistory: [],\n      currentMoveIndex: -1,\n      error: '',\n      draggedPiece: null,\n      isGameOver: false,\n      isPlayerTurn: newPlayerColor === 'w',\n      playerColor: newPlayerColor,\n      isBoardFlipped: newPlayerColor === 'b',\n      isGameStarted: true,\n      lastMove: null,\n      positionHistory: [],\n      isThreeFoldRepetition: false\n    });\n    if (newPlayerColor === 'b') setTimeout(makeStockfishMove, 1500);\n  };\n  const handleMove = useCallback((from, to) => {\n    if (gameState.isGameOver || !gameState.isPlayerTurn || !gameState.isGameStarted) return;\n    try {\n      const newGame = new Chess(gameState.game.fen());\n      const move = newGame.move({\n        from: from.square,\n        to: to.square,\n        promotion: 'q'\n      });\n      const newMoveHistory = [...gameState.moveHistory.slice(0, gameState.currentMoveIndex + 1), move];\n      const newPosition = newGame.fen().split(' ').slice(0, 4).join(' ');\n      const newPositionHistory = [...gameState.positionHistory, newPosition];\n      updateGameState({\n        game: newGame,\n        moveHistory: newMoveHistory,\n        currentMoveIndex: gameState.currentMoveIndex + 1,\n        error: '',\n        isPlayerTurn: false,\n        lastMove: {\n          from: from.square,\n          to: to.square\n        },\n        validMoves: [],\n        positionHistory: newPositionHistory,\n        selectedPiece: null,\n        draggedPiece: null\n      });\n    } catch (error) {\n      setGameState(prev => ({\n        ...prev,\n        error: 'Invalid move. Please try again.'\n      }));\n    }\n  }, [gameState, updateGameState]);\n  const getValidMoves = useCallback(square => gameState.game.moves({\n    square,\n    verbose: true\n  }).map(move => move.to), [gameState.game]);\n  const handleSquareClick = (i, j) => {\n    if (gameState.isGameOver || !gameState.isPlayerTurn) return;\n    const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n    const clickedPiece = gameState.board[actualI][actualJ];\n    const square = `${String.fromCharCode(97 + actualJ)}${8 - actualI}`;\n    if (gameState.selectedPiece) {\n      if (clickedPiece && clickedPiece[0] === gameState.game.turn()) {\n        setGameState(prev => ({\n          ...prev,\n          selectedPiece: {\n            piece: clickedPiece,\n            i: actualI,\n            j: actualJ,\n            square\n          },\n          error: '',\n          validMoves: getValidMoves(square)\n        }));\n      } else {\n        handleMove(gameState.selectedPiece, {\n          i: actualI,\n          j: actualJ,\n          square\n        });\n      }\n    } else if (clickedPiece && clickedPiece[0] === gameState.game.turn()) {\n      setGameState(prev => ({\n        ...prev,\n        selectedPiece: {\n          piece: clickedPiece,\n          i: actualI,\n          j: actualJ,\n          square\n        },\n        validMoves: getValidMoves(square),\n        error: ''\n      }));\n    } else {\n      setGameState(prev => ({\n        ...prev,\n        error: 'Please select a piece to move.',\n        validMoves: []\n      }));\n    }\n  };\n  const handleDragStart = (e, i, j) => {\n    if (gameState.isGameOver || !gameState.isPlayerTurn) {\n      e.preventDefault();\n      return;\n    }\n    const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n    const piece = gameState.board[actualI][actualJ];\n    const square = `${String.fromCharCode(97 + actualJ)}${8 - actualI}`;\n    if (piece && piece[0] === gameState.game.turn()) {\n      setGameState(prev => ({\n        ...prev,\n        draggedPiece: {\n          piece,\n          i: actualI,\n          j: actualJ,\n          square\n        },\n        validMoves: getValidMoves(square),\n        error: ''\n      }));\n    } else {\n      e.preventDefault();\n    }\n  };\n  const handleDrop = (e, i, j) => {\n    e.preventDefault();\n    if (gameState.isGameOver || !gameState.isPlayerTurn || !gameState.draggedPiece) return;\n    const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n    const to = {\n      i: actualI,\n      j: actualJ,\n      square: `${String.fromCharCode(97 + actualJ)}${8 - actualI}`\n    };\n    if (gameState.draggedPiece.i === actualI && gameState.draggedPiece.j === actualJ) {\n      setGameState(prev => ({\n        ...prev,\n        validMoves: [],\n        draggedPiece: null\n      }));\n    } else {\n      handleMove(gameState.draggedPiece, to);\n    }\n  };\n  const createBoard = () => {\n    let boardToRender = gameState.isBoardFlipped ? [...gameState.board].reverse().map(row => [...row].reverse()) : gameState.board;\n    return boardToRender.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, j) => {\n        const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n        const square = `${String.fromCharCode(97 + actualJ)}${8 - actualI}`;\n        const isLastMoveSquare = gameState.lastMove && (gameState.lastMove.from === square || gameState.lastMove.to === square);\n        const isValidMove = gameState.validMoves.includes(square);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${(i + j) % 2 === 0 ? 'white' : 'black'} \n                ${gameState.selectedPiece && gameState.selectedPiece.i === actualI && gameState.selectedPiece.j === actualJ ? 'selected' : ''}\n                ${isLastMoveSquare ? 'highlight' : ''}\n                ${isValidMove ? 'valid-move' : ''}`,\n          onClick: () => handleSquareClick(i, j),\n          onDragOver: e => e.preventDefault(),\n          onDrop: e => handleDrop(e, i, j),\n          children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `images/${piece}.png`,\n            alt: piece,\n            draggable: !gameState.isGameOver,\n            onDragStart: e => handleDragStart(e, i, j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this)\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this);\n      })\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this));\n  };\n  const moveToPosition = index => {\n    const newGame = new Chess();\n    for (let i = 0; i <= index; i++) {\n      newGame.move(gameState.moveHistory[i].san);\n    }\n    const lastMove = gameState.moveHistory[index];\n    setGameState(prev => ({\n      ...prev,\n      game: newGame,\n      currentMoveIndex: index,\n      lastMove: lastMove ? {\n        from: lastMove.from,\n        to: lastMove.to\n      } : null,\n      board: newGame.board().map(row => row.map(square => square ? `${square.color}${square.type}` : ''))\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: createBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: gameState.stockfishLevel,\n            onChange: e => updateGameState({\n              stockfishLevel: parseInt(e.target.value)\n            }),\n            children: [...Array(12)].map((_, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: i + 1,\n              children: [\"Level \", i + 1]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-decisions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: gameState.isGameOver || !gameState.isPlayerTurn,\n            onClick: () => setGameState(prev => ({\n              ...prev,\n              isGameOver: true,\n              error: 'You resigned. Opponent wins!'\n            })),\n            children: \"Resign\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: gameState.isGameOver || !gameState.isPlayerTurn,\n            onClick: () => setGameState(prev => ({\n              ...prev,\n              isGameOver: true,\n              error: 'Draw offered.'\n            })),\n            children: \"Offer Draw\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), gameState.currentMoveIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: gameState.isGameOver,\n            onClick: () => moveToPosition(gameState.currentMoveIndex - 2),\n            children: \"Take Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), gameState.error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: gameState.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 29\n      }, this), !gameState.isGameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-start-message\",\n        children: \"Click New Game to start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 38\n      }, this), gameState.isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-message\",\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"move-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => moveToPosition(-1),\n            disabled: gameState.currentMoveIndex === -1,\n            children: '<<'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => moveToPosition(Math.max(-1, gameState.currentMoveIndex - 1)),\n            disabled: gameState.currentMoveIndex === -1,\n            children: '<'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => moveToPosition(Math.min(gameState.moveHistory.length - 1, gameState.currentMoveIndex + 1)),\n            disabled: gameState.currentMoveIndex === gameState.moveHistory.length - 1,\n            children: '>'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => moveToPosition(gameState.moveHistory.length - 1),\n            disabled: gameState.currentMoveIndex === gameState.moveHistory.length - 1,\n            children: '>>'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), Array.from({\n          length: Math.ceil(gameState.moveHistory.length / 2)\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"move-pair\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"move-number\",\n            children: [i + 1, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MoveDisplay, {\n            move: gameState.moveHistory[2 * i],\n            index: 2 * i,\n            currentIndex: gameState.currentMoveIndex,\n            onMoveClick: () => moveToPosition(2 * i)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), gameState.moveHistory[2 * i + 1] && /*#__PURE__*/_jsxDEV(MoveDisplay, {\n            move: gameState.moveHistory[2 * i + 1],\n            index: 2 * i + 1,\n            currentIndex: gameState.currentMoveIndex,\n            onMoveClick: () => moveToPosition(2 * i + 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"ij3Pdo7EFyFUbnhES54Gn0J4gi8=\");\n_c = Chessboard;\nexport default Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Chess","MoveDisplay","jsxDEV","_jsxDEV","initialBoard","Chessboard","_s","gameState","setGameState","game","board","selectedPiece","moveHistory","currentMoveIndex","error","draggedPiece","isGameOver","stockfishLevel","isPlayerTurn","playerColor","Math","random","isBoardFlipped","isGameStarted","isThreeFoldRepetition","validMoves","positionHistory","lastMove","stockfishWorker","updateGameState","updates","prev","map","row","square","color","type","handleStockfishMessage","event","message","data","startsWith","from","to","split","match","newGame","fen","move","promotion","newPosition","slice","join","newPositionHistory","console","current","Worker","postMessage","onmessage","_stockfishWorker$curr","terminate","makeStockfishMove","_stockfishWorker$curr2","_stockfishWorker$curr3","depth","setTimeout","handleNewGame","newPlayerColor","handleMove","newMoveHistory","getValidMoves","moves","verbose","handleSquareClick","i","j","actualI","actualJ","clickedPiece","String","fromCharCode","turn","piece","handleDragStart","e","preventDefault","handleDrop","createBoard","boardToRender","reverse","className","children","isLastMoveSquare","isValidMove","includes","onClick","onDragOver","onDrop","src","alt","draggable","onDragStart","fileName","_jsxFileName","lineNumber","columnNumber","moveToPosition","index","san","value","onChange","parseInt","target","Array","_","disabled","max","min","length","ceil","currentIndex","onMoveClick","_c","$RefreshReg$"],"sources":["/home/achraf/learning/QuickChess/frontend/src/components/chessboard/Chessboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Chess } from 'chess.js';\nimport './Chessboard.css';\nimport MoveDisplay from './MoveDisplay';\n\nconst initialBoard = [\n  ['br', 'bn', 'bb', 'bq', 'bk', 'bb', 'bn', 'br'],\n  ['bp', 'bp', 'bp', 'bp', 'bp', 'bp', 'bp', 'bp'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['wp', 'wp', 'wp', 'wp', 'wp', 'wp', 'wp', 'wp'],\n  ['wr', 'wn', 'wb', 'wq', 'wk', 'wb', 'wn', 'wr'],\n];\n\nconst Chessboard = () => {\n  const [gameState, setGameState] = useState({\n    game: new Chess(),\n    board: initialBoard,\n    selectedPiece: null,\n    moveHistory: [],\n    currentMoveIndex: -1,\n    error: '',\n    draggedPiece: null,\n    isGameOver: false,\n    stockfishLevel: 1,\n    isPlayerTurn: true,\n    playerColor: Math.random() < 0.5 ? 'w' : 'b',\n    isBoardFlipped: false,\n    isGameStarted: false,\n    isThreeFoldRepetition: false,\n    validMoves: [],\n    positionHistory: [],\n    lastMove: null\n  });\n\n  const stockfishWorker = useRef(null);\n\n\n  const updateGameState = useCallback((updates) => {\n    setGameState(prev => ({\n      ...prev,\n      ...updates,\n      board: updates.game ? updates.game.board().map(row => row.map(square => square ? `${square.color}${square.type}` : '')) : prev.board,\n      isGameOver: updates.game ? updates.game.isGameOver() : prev.isGameOver\n    }));\n  }, []);\n\n  const handleStockfishMessage = useCallback((event) => {\n    const message = event.data;\n    if (typeof message === 'string' && message.startsWith('bestmove')) {\n      const [from, to] = message.split(' ')[1].match(/.{1,2}/g);\n      const newGame = new Chess(gameState.game.fen());\n      try {\n        const move = newGame.move({ from, to, promotion: 'q' });\n        const newPosition = newGame.fen().split(' ').slice(0, 4).join(' ');\n        const newPositionHistory = [...gameState.positionHistory, newPosition];\n        if (move) {\n          updateGameState({\n            game: newGame,\n            moveHistory: [...gameState.moveHistory, move],\n            currentMoveIndex: gameState.currentMoveIndex + 1,\n            positionHistory: newPositionHistory,\n            isPlayerTurn: true,\n            lastMove: { from, to }\n          });\n        }\n      } catch (error) {\n        console.error('Error applying Stockfish move:', error.message);\n      }\n    }\n  }, [gameState, updateGameState]);\n\n  useEffect(() => {\n    try {\n      stockfishWorker.current = new Worker('stockfishWorker.js');\n      stockfishWorker.current.postMessage('uci');\n      stockfishWorker.current.postMessage('ucinewgame');\n      stockfishWorker.current.postMessage(`setoption name Skill Level value ${gameState.stockfishLevel}`);\n      stockfishWorker.current.onmessage = handleStockfishMessage;\n    } catch (error) {\n      console.error('Error initializing Stockfish worker:', error);\n    }\n    return () => stockfishWorker.current?.terminate();\n  }, [gameState.stockfishLevel, handleStockfishMessage]);\n\n  useEffect(() => {\n    setGameState(prev => ({ ...prev, isBoardFlipped: prev.playerColor === 'b' }));\n  }, []);\n\n  const makeStockfishMove = useCallback(() => {\n    const fen = gameState.game.fen();\n    const depth = gameState.stockfishLevel;\n    stockfishWorker.current?.postMessage(`position fen ${fen}`);\n    stockfishWorker.current?.postMessage(`go depth ${depth}`);\n  }, [gameState.game, gameState.stockfishLevel]);\n\n  useEffect(() => {\n    if (!gameState.isPlayerTurn && !gameState.isGameOver) {\n      setTimeout(makeStockfishMove, 1500);\n    }\n  }, [gameState.isPlayerTurn, gameState.isGameOver, makeStockfishMove]);\n\n  const handleNewGame = () => {\n    const newPlayerColor = Math.random() < 0.5 ? 'w' : 'b';\n    updateGameState({\n      game: new Chess(),\n      board: initialBoard,\n      moveHistory: [],\n      currentMoveIndex: -1,\n      error: '',\n      draggedPiece: null,\n      isGameOver: false,\n      isPlayerTurn: newPlayerColor === 'w',\n      playerColor: newPlayerColor,\n      isBoardFlipped: newPlayerColor === 'b',\n      isGameStarted: true,\n      lastMove: null,\n      positionHistory: [],\n      isThreeFoldRepetition: false\n    });\n    if (newPlayerColor === 'b') setTimeout(makeStockfishMove, 1500);\n  };\n\n  const handleMove = useCallback((from, to) => {\n    if (gameState.isGameOver || !gameState.isPlayerTurn || !gameState.isGameStarted) return;\n    try {\n      const newGame = new Chess(gameState.game.fen());\n      const move = newGame.move({\n        from: from.square,\n        to: to.square,\n        promotion: 'q'\n      });\n      const newMoveHistory = [...gameState.moveHistory.slice(0, gameState.currentMoveIndex + 1), move];\n      const newPosition = newGame.fen().split(' ').slice(0, 4).join(' ');\n      const newPositionHistory = [...gameState.positionHistory, newPosition];\n      updateGameState({\n        game: newGame,\n        moveHistory: newMoveHistory,\n        currentMoveIndex: gameState.currentMoveIndex + 1,\n        error: '',\n        isPlayerTurn: false,\n        lastMove: { from: from.square, to: to.square },\n        validMoves: [],\n        positionHistory: newPositionHistory,\n        selectedPiece: null,\n        draggedPiece: null\n      });\n    } catch (error) {\n      setGameState(prev => ({ ...prev, error: 'Invalid move. Please try again.' }));\n    }\n  }, [gameState, updateGameState]);\n\n  const getValidMoves = useCallback((square) =>\n    gameState.game.moves({ square, verbose: true }).map(move => move.to),\n    [gameState.game]);\n\n  const handleSquareClick = (i, j) => {\n    if (gameState.isGameOver || !gameState.isPlayerTurn) return;\n    const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n    const clickedPiece = gameState.board[actualI][actualJ];\n    const square = `${String.fromCharCode(97 + actualJ)}${8 - actualI}`;\n\n    if (gameState.selectedPiece) {\n      if (clickedPiece && clickedPiece[0] === gameState.game.turn()) {\n        setGameState(prev => ({\n          ...prev,\n          selectedPiece: { piece: clickedPiece, i: actualI, j: actualJ, square },\n          error: '',\n          validMoves: getValidMoves(square)\n        }));\n      } else {\n        handleMove(gameState.selectedPiece, { i: actualI, j: actualJ, square });\n      }\n    } else if (clickedPiece && clickedPiece[0] === gameState.game.turn()) {\n      setGameState(prev => ({\n        ...prev,\n        selectedPiece: { piece: clickedPiece, i: actualI, j: actualJ, square },\n        validMoves: getValidMoves(square),\n        error: '',\n      }));\n    } else {\n      setGameState(prev => ({ ...prev, error: 'Please select a piece to move.', validMoves: [] }));\n    }\n  };\n\n  const handleDragStart = (e, i, j) => {\n    if (gameState.isGameOver || !gameState.isPlayerTurn) {\n      e.preventDefault();\n      return;\n    }\n    const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n    const piece = gameState.board[actualI][actualJ];\n    const square = `${String.fromCharCode(97 + actualJ)}${8 - actualI}`;\n    if (piece && piece[0] === gameState.game.turn()) {\n      setGameState(prev => ({\n        ...prev,\n        draggedPiece: { piece, i: actualI, j: actualJ, square },\n        validMoves: getValidMoves(square),\n        error: '',\n      }));\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  const handleDrop = (e, i, j) => {\n    e.preventDefault();\n    if (gameState.isGameOver || !gameState.isPlayerTurn || !gameState.draggedPiece) return;\n    const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n    const to = { i: actualI, j: actualJ, square: `${String.fromCharCode(97 + actualJ)}${8 - actualI}` };\n    if (gameState.draggedPiece.i === actualI && gameState.draggedPiece.j === actualJ) {\n      setGameState(prev => ({ ...prev, validMoves: [], draggedPiece: null }));\n    } else {\n      handleMove(gameState.draggedPiece, to);\n    }\n  };\n\n  const createBoard = () => {\n    let boardToRender = gameState.isBoardFlipped ?\n      [...gameState.board].reverse().map(row => [...row].reverse()) :\n      gameState.board;\n    return boardToRender.map((row, i) => (\n      <div key={i} className=\"row\">\n        {row.map((piece, j) => {\n          const [actualI, actualJ] = gameState.isBoardFlipped ? [7 - i, 7 - j] : [i, j];\n          const square = `${String.fromCharCode(97 + actualJ)}${8 - actualI}`;\n          const isLastMoveSquare = gameState.lastMove && (gameState.lastMove.from === square || gameState.lastMove.to === square);\n          const isValidMove = gameState.validMoves.includes(square);\n          return (\n            <div\n              key={`${i}-${j}`}\n              className={`square ${(i + j) % 2 === 0 ? 'white' : 'black'} \n                ${gameState.selectedPiece && gameState.selectedPiece.i === actualI && gameState.selectedPiece.j === actualJ ? 'selected' : ''}\n                ${isLastMoveSquare ? 'highlight' : ''}\n                ${isValidMove ? 'valid-move' : ''}`}\n              onClick={() => handleSquareClick(i, j)}\n              onDragOver={(e) => e.preventDefault()}\n              onDrop={(e) => handleDrop(e, i, j)}\n            >\n              {piece && (\n                <img\n                  src={`images/${piece}.png`}\n                  alt={piece}\n                  draggable={!gameState.isGameOver}\n                  onDragStart={(e) => handleDragStart(e, i, j)}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    ));\n  };\n\n  const moveToPosition = (index) => {\n    const newGame = new Chess();\n    for (let i = 0; i <= index; i++) {\n      newGame.move(gameState.moveHistory[i].san);\n    }\n    const lastMove = gameState.moveHistory[index];\n    setGameState(prev => ({\n      ...prev,\n      game: newGame,\n      currentMoveIndex: index,\n      lastMove: lastMove ? { from: lastMove.from, to: lastMove.to } : null,\n      board: newGame.board().map(row => row.map(square => square ? `${square.color}${square.type}` : ''))\n    }));\n  };\n\n  return (\n    <div className='container'>\n      <div className=\"chessboard\">{createBoard()}</div>\n      <div className='right-panel'>\n        <div className=\"controls\">\n          <div className=\"new-game\">\n            <select\n              value={gameState.stockfishLevel}\n              onChange={(e) => updateGameState({ stockfishLevel: parseInt(e.target.value) })}\n            >\n              {[...Array(12)].map((_, i) => (\n                <option key={i} value={i + 1}>Level {i + 1}</option>\n              ))}\n            </select>\n            <button onClick={handleNewGame}>New Game</button>\n          </div>\n          <div className='game-decisions'>\n            <button\n              disabled={gameState.isGameOver || !gameState.isPlayerTurn}\n              onClick={() => setGameState(prev => ({ ...prev, isGameOver: true, error: 'You resigned. Opponent wins!' }))}\n            >\n              Resign\n            </button>\n            <button\n              disabled={gameState.isGameOver || !gameState.isPlayerTurn}\n              onClick={() => setGameState(prev => ({ ...prev, isGameOver: true, error: 'Draw offered.' }))}\n            >\n              Offer Draw\n            </button>\n            {gameState.currentMoveIndex > 0 && (\n              <button\n                disabled={gameState.isGameOver}\n                onClick={() => moveToPosition(gameState.currentMoveIndex - 2)}\n              >\n                Take Back\n              </button>\n            )}\n          </div>\n        </div>\n        {gameState.error && <div className=\"error-message\">{gameState.error}</div>}\n        {!gameState.isGameStarted && <div className=\"game-start-message\">Click New Game to start</div>}\n        {gameState.isGameOver && <div className=\"game-over-message\">Game Over</div>}\n        <div className=\"move-history\">\n          <div className=\"move-navigation\">\n            <button onClick={() => moveToPosition(-1)} disabled={gameState.currentMoveIndex === -1}>{'<<'}</button>\n            <button onClick={() => moveToPosition(Math.max(-1, gameState.currentMoveIndex - 1))} disabled={gameState.currentMoveIndex === -1}>{'<'}</button>\n            <button onClick={() => moveToPosition(Math.min(gameState.moveHistory.length - 1, gameState.currentMoveIndex + 1))} disabled={gameState.currentMoveIndex === gameState.moveHistory.length - 1}>{'>'}</button>\n            <button onClick={() => moveToPosition(gameState.moveHistory.length - 1)} disabled={gameState.currentMoveIndex === gameState.moveHistory.length - 1}>{'>>'}</button>\n          </div>\n          {Array.from({ length: Math.ceil(gameState.moveHistory.length / 2) }, (_, i) => (\n            <div key={i} className=\"move-pair\">\n              <span className=\"move-number\">{i + 1}.</span>\n              <MoveDisplay\n                move={gameState.moveHistory[2 * i]}\n                index={2 * i}\n                currentIndex={gameState.currentMoveIndex}\n                onMoveClick={() => moveToPosition(2 * i)}\n              />\n              {gameState.moveHistory[2 * i + 1] && (\n                <MoveDisplay\n                  move={gameState.moveHistory[2 * i + 1]}\n                  index={2 * i + 1}\n                  currentIndex={gameState.currentMoveIndex}\n                  onMoveClick={() => moveToPosition(2 * i + 1)}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chessboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}